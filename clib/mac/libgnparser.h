/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/gnames/gnparser/binding */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 5 "main.go"

	#include "stdlib.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// ParseToString function takes a name-string, desired format, a withDetails
// flag as 0|1 integer. It parses the name-string to either JSON, or a CSV
// string, depending on the desired format. Format argument can take values of
// 'csv', 'compact', 'pretty'. If withDetails argument is 0, additional
// parsed details are ommited, if it is 1 -- they are included.
// true.
extern char* ParseToString(char* name, char* f, int details, int cultivars);

// FreeMemory takes a string pointer and frees its memory.
extern void FreeMemory(char* p);

// ParseAryToString function takes an array of names, parsing format, and a
// withDetails flag as 0|1 integer.  Parsed outputs are sent as a string in
// either CSV or JSON format.  Format argument can take values of 'csv',
// 'compact', or 'pretty'. For withDetails argument 0 means false, 1 means
// true.
extern char* ParseAryToString(char** in, int length, char* f, int details, int cultivars);

#ifdef __cplusplus
}
#endif
